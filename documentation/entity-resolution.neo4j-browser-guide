<style type="text/css" media="screen">
/*
.nodes-image {
	margin:-100;
}
*/	
@import url("//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css");

.imageblock .content img, .image img {max-width: 900px;max-height: 300px;}
.deck h3, .deck h4 {display: block !important;margin-bottom:8px;margin-top:5px;}
.listingblock {margin:8px;}
.pull-bottom {position:relative;bottom:1em;}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note:before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip:before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning:before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution:before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important:before{content:"\f06a";color:#bf0000}
.admonitionblock.note.speaker { display:none; }
</style>
<style type="text/css" media="screen">
/* #editor.maximize-editor .CodeMirror-code { font-size:24px; line-height:26px; } */
</style>
<article class="guide" ng-controller="AdLibDataController">
  <carousel class="deck container-fluid">
    <!--slide class="row-fluid">
      <div class="col-sm-3">
        <h3>Entity Resolution</h3>
        <p class="lead">Information</p>
			<!dl>
				
				
				
				
				
			</dl>
		</div>
      <div class="col-sm-9">
        <figure>
          <img style="width:300px" src=""/>
        </figure>
      </div>
    </slide-->
    


   <h4>Entity Resolution</h4>
   


<slide class="row-fluid">
  <div class="col-sm-12">
    <h3>Entity Resolution, Record Linkage and Similarity wise recommendation with Neo4j</h3>
    <br/>
    <div>
      


   <h4>What is Entity Resolution?</h4>
   <div class="paragraph">
<p>Entity Resolution (ER) is the process of disambiguating data to determine if multiple digital records represent the same real-world entity such as a person, organization, place, or other type of object.</p>
</div>
<div class="paragraph">
<p>For example, say you have information on persons coming from different e-commerce platforms, or say same users with different profiles in a system.</p>
</div>
<div class="paragraph">
<p>They may have slightly different contact information, with addresses formatted differently, using different forms/abbreviations of names, etc.</p>
</div>
<div class="paragraph">
<p>A human may be able to tell if the records actually belong to the same underlying entity but given the number of possible combinations and matching that can be had, there is a need for an intelligent automated approach to doing so, which is where ER systems come into play.</p>
</div>
<div class="paragraph">
<p>There can be numerous use cases for Entity Resolution across industries like patient history linkage in Healthcare, customers' preferences and history in Insurance and Financial Services, identifying  similar entities or groups for recommendation in E-commerce and Digital Marketing etc.</p>
</div>
	</div>
  </div>
</slide>



<slide class="row-fluid">
  <div class="col-sm-12">
    <h3>Demo Use Case</h3>
    <br/>
    <div>
      <div class="paragraph">
<p>This demo guide covers a similar use case of performing Entity Resolution.</p>
</div>
<div class="paragraph">
<p>We have taken an example of a dummy online movie streaming platform. For ease of understanding, we have taken only movies and users datasets.</p>
</div>
<div class="paragraph">
<p>Users can have one or more accounts on a movie streaming platform.</p>
</div>
<div class="paragraph">
<p>We are performing Entity Resolution over users’ data to identify similar/same users. We are also performing linking for users which are from same account (or group/family). Later, we are leveraging this linking to provide effective recommendations to individual users.</p>
</div>



   <h4>Data Model</h4>
   <div class="imageblock">
<div class="content">
<img src="https://guides.neo4j.com/sandbox/entity-resolution/img/model.png" alt="model">
</div>
</div>
	</div>
  </div>
</slide>



<slide class="row-fluid">
  <div class="col-sm-12">
    <h3>Steps in this Guide</h3>
    <br/>
    <div>
      <div class="paragraph">
<p>In this guide, we will perform below steps:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Explore: Perform basic querying with Cypher on loaded data</p>
</li>
<li>
<p>ER: Perform Entity Resolution based on similarity and do record linkage</p>
</li>
<li>
<p>Recommend: Generate recommendation based on user similarities / preferences</p>
</li>
<li>
<p>Additional: Try couple of preference based similarities and recommendation examples</p>
</li>
</ul>
</div>



   <h4>Notes</h4>
   <div class="paragraph">
<p>In this demonstration, we have used Neo4j APOC (Awesome Procedures on Cypher) and Neo4j GDS (Graph Data Science) libraries few Cypher queries.
To execute the Cypher queries with APOC or GDS functions, you will need to add these libraries as plugins to your Neo4j database instance.</p>
</div>
<div class="paragraph">
<p>For more details on APOC and GDS, please refer below links.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://neo4j.com/developer/neo4j-apoc/" target="_blank">APOC</a></p>
</li>
<li>
<p><a href="https://neo4j.com/docs/graph-data-science/current/" target="_blank">GDS</a></p>
</li>
</ul>
</div>
	</div>
  </div>
</slide>



<slide class="row-fluid">
  <div class="col-sm-12">
    <h3>Perform basic querying with Cypher on loaded data</h3>
    <br/>
    <div>
      <div class="paragraph">
<p>Query users who have watched movie "The Boss Baby: Family Business"</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->MATCH (u:User)-[w:WATCHED]-&gt;(m:Movie {title: "The Boss Baby: Family Business"})
RETURN u, w, m LIMIT 5<!--/code--></pre>
</div>
</div>
<div class="paragraph">
<p>Show users from "New York" and movies watched by them</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->MATCH (u:User {state: "New York"} )-[w:WATCHED]-&gt;(m)  RETURN u, w, m LIMIT 50<!--/code--></pre>
</div>
</div>
<div class="paragraph">
<p>Show trending genres in Texas</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->MATCH (u:User {state: "Texas"} )-[:WATCHED]-&gt;(m)-[:HAS]-&gt;(g:Genre)
// group by genre, order by frequency
RETURN g.name as genre, count(g) as freq
ORDER BY freq DESC<!--/code--></pre>
</div>
</div>
	</div>
  </div>
</slide>



<slide class="row-fluid">
  <div class="col-sm-12">
    <h3>Perform Entity Resolution based on similarity and perform record linkage</h3>
    <br/>
    <div>
      


   <h4>Users who have similar names</h4>
   <div class="paragraph">
<p>These are users who have same/similar names but different (redundant) profiles due to typos or abbreviations used for some instances.</p>
</div>
<div class="paragraph">
<p>We are using the Jaro Winkler Distance algorithm from the Neo4j APOC library.</p>
</div>
<div class="paragraph">
<p>References</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance" target="_blank">Jaro–Winkler distance</a></p>
</li>
<li>
<p><a href="https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.jaroWinklerDistance/" target="_blank">apoc.text.jaroWinklerDistance</a></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->MATCH (a:User)
MATCH (b:User)
// not the same user
WHERE a &lt;&gt; b

// users with full-names
WITH a, b, a.firstName + ' ' + a.lastName AS name1, b.firstName + ' ' + b.lastName AS name2

// compute different similiarities
WITH *,
toInteger((1-apoc.text.jaroWinklerDistance(name1, name2)) * 100) AS nameSimilarity,
toInteger((1-apoc.text.jaroWinklerDistance(a.email, b.email)) * 100) AS emailSimilarity,
toInteger((1-apoc.text.jaroWinklerDistance(a.phone, b.phone)) * 100) AS phoneSimilarity

// compute a total similarity score
WITH a, b, name1, name2, toInteger((nameSimilarity + emailSimilarity + phoneSimilarity)/3) as similarity

// filter
WHERE similarity &gt;= 90

RETURN name1, name2, a.email, b.email,  similarity

ORDER BY similarity DESC<!--/code--></pre>
</div>
</div>



   <h4>Users belonging to same family</h4>
   <div class="paragraph">
<p>Users who have similar last names and live in same state, and use same IP address, that means they are either same users with redundant profile or belong to the same family</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->// shared IP address
MATCH (a:User)--&gt;(ip:IpAddress)&lt;--(b:User)
// same lastname and state
WHERE a.lastName = b.lastName
AND a.state = b.state AND a.country = b.country

// group by joint attributes, collect all member-names
WITH ip, a.country as country, a.state as state,
     a.lastName as familyName,
    collect(distinct b.firstName + ' '  + b.lastName) as members,
    count(distinct b) as memberCount

RETURN state, familyName, memberCount, members
ORDER BY memberCount DESC<!--/code--></pre>
</div>
</div>
<div class="paragraph">
<p>Record Linkage: Create Family Nodes for each family and connect members. This is how we link the similar users and family members using a common Family node</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->// shared IP address
MATCH (a:User)--&gt;(ip:IpAddress)&lt;--(b:User)
// same lastname and state
WHERE a.lastName = b.lastName
AND a.state = b.state AND a.country = b.country

// group by joint attributes, collect all members
WITH ip, a.country as country, a.state as state,
     a.lastName as familyName,
     collect(distinct b) as familyMembers,
     count(distinct b) as totalMembers
WITH familyName, head(familyMembers) as first, tail(familyMembers) as rest
// not global family but within first member
MERGE (first)-[:BELONGS_TO]-&gt;(f:Family {name: familyName})
WITH f,rest

UNWIND rest as member

MERGE (member)-[r:BELONGS_TO]-&gt;(f)
RETURN count(*);<!--/code--></pre>
</div>
</div>



   <h4>Check how may families are created</h4>
   <div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->MATCH (f:Family)&lt;-[b:BELONGS_TO]-(u:User)

RETURN f, b, u LIMIT 200<!--/code--></pre>
</div>
</div>
	</div>
  </div>
</slide>



<slide class="row-fluid">
  <div class="col-sm-12">
    <h3>Generate recommendation based on user family or group similarities / preferences</h3>
    <br/>
    <div>
      <div class="paragraph">
<p>Providing recommendation to the member based on his/her account/family members history. Get preferred genres by other account members and suggest top 5 movies from most watched genres.</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->MATCH (user:User {firstName: "Vilma", lastName: "De Mars"})
// other family members
MATCH (user)-[:BELONGS_TO]-&gt;(f)&lt;-[:BELONGS_TO]-(otherMember)

// what have they watched and transitive via genre
MATCH (otherMember)-[:WATCHED]-&gt;(m1)-[:HAS]-&gt;(g:Genre)&lt;-[:HAS]-(m2)

// aggregate by genre, sort by watch count
WITH g, count(*) as watched, m2
ORDER BY watched DESC

// count totals per genre, top-5 watched per genre
WITH g, count(distinct m2) as totalMovies, collect(m2.title)[0..5] as movies

// return 5 per genre
RETURN g.name as genre, totalMovies, movies as topFiveMovies
ORDER BY totalMovies DESC LIMIT 10<!--/code--></pre>
</div>
</div>
	</div>
  </div>
</slide>



<slide class="row-fluid">
  <div class="col-sm-12">
    <h3>Using Neo4j Node Similarity Algorigthm to find similar users and get recommendations</h3>
    <br/>
    <div>
      <div class="paragraph">
<p>Find users based on their movie watching preferences using Node Similarity algorithm</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://neo4j.com/docs/graph-data-science/current/algorithms/node-similarity/" target="_blank">Node Similarity</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Step 1: For this, we will first create an in-memory graph with node and relationship specification to perform matching</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->CALL gds.graph.project(
    'similarityGraph',
    // labels
    ['User', 'Movie'],
    {
        // relationships
        WATCHED: {
            type: 'WATCHED',
            properties: {
                strength: {
                    property: 'watchCount',
                    defaultValue: 1
                }
            }
        }
    }
);<!--/code--></pre>
</div>
</div>
<div class="paragraph">
<p>Step 2: Perform memory estimate for the matching to execute</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->CALL gds.nodeSimilarity.write.estimate('similarityGraph', {
  writeRelationshipType: 'SIMILAR',
  writeProperty: 'score'
})
YIELD nodeCount, relationshipCount, bytesMin, bytesMax, requiredMemory<!--/code--></pre>
</div>
</div>
<div class="paragraph">
<p>Step 3: Execute algorithm and show results</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->CALL gds.nodeSimilarity.stream('similarityGraph')
// return ids and similarity
YIELD node1, node2, similarity
WITH * ORDER BY similarity DESC LIMIT 50
// fetch nodes by id
WITH gds.util.asNode(node1) AS person1, gds.util.asNode(node2) AS person2, similarity
RETURN
person1.firstName + ' ' +  person1.lastName as p1,
person2.firstName  + ' ' +   person2.lastName as p2, similarity;<!--/code--></pre>
</div>
</div>
<div class="paragraph">
<p>Step 4: Get recommendations for a user based on similarity. For a user, fetch recommendations based on other similar users' preferences</p>
</div>
<div class="listingblock">
<div class="content">
<pre mode="cypher"  class="highlight pre-scrollable programlisting cm-s-neo code runnable standalone-example ng-binding" data-lang="cypher" lang="cypher"><!--code class="cypher language-cypher"-->MATCH (person1:User)
WHERE person1.firstName = 'Paulie' AND person1.lastName = 'Imesson'

CALL gds.nodeSimilarity.stream('similarityGraph')
YIELD node1, node2, similarity
// limit to our user
WHERE node1 = id(person1)

WITH person1, gds.util.asNode(node2) AS person2, similarity

// what did the other people watch
MATCH (person2)-[w:WATCHED]-&gt;(m)
// that our user hasn't seen
WHERE NOT exists { (person1)-[:WATCHED]-&gt;(m) }

RETURN m.title as movie, SUM(w.watchCount) as watchCount
ORDER BY watchCount DESC LIMIT 10<!--/code--></pre>
</div>
</div>
	</div>
  </div>
</slide>



<slide class="row-fluid">
  <div class="col-sm-12">
    <h3>Next steps</h3>
    <br/>
    <div>
      


   <h4>Full Source Code Available on GitHub</h4>
   <div class="ulist">
<ul>
<li>
<p><a href="https://github.com/neo4j-graph-examples/enitity_resolution" target="_blank">Source Code with Cypher and data dumps</a></p>
</li>
<li>
<p><a href="https://github.com/neo4j-graph-examples/" target="_blank">Other Example Datasets</a></p>
</li>
</ul>
</div>



   <h4>References</h4>
   <div class="ulist">
<ul>
<li>
<p><a href="https://graphacademy.neo4j.com" target="_blank">GraphAcademy</a></p>
</li>
<li>
<p><a href="https://neo4j.com/developer/" target="_blank">Developer resources</a></p>
</li>
<li>
<p><a href="https://neo4j.com/docs/cypher-manual" target="_blank">Neo4j Cypher Manual</a></p>
</li>
<li>
<p><a href="https://neo4j.com/developer-blog/exploring-supervised-entity-resolution-in-neo4j/" target="_blank">Entity Resolution in Neo4j Article</a></p>
</li>
</ul>
</div>
	</div>
  </div>
</slide>
  </carousel>
</article>